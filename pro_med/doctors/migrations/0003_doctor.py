# Generated by Django 5.0.3 on 2024-03-21 06:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('doctors', '0002_doctors_position'),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='pacients/%Y/%Y/%m/%d/%H-%M-%S/', verbose_name='Фото')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('birthday', models.DateField(verbose_name='Дата рождения')),
                ('specialization', models.CharField(max_length=100, verbose_name='Специализация')),
                ('position', models.CharField(default=None, max_length=200, verbose_name='Должность')),
                ('education_place', models.CharField(max_length=300, verbose_name='Учебное заведение получения образования')),
                ('education_end_year', models.IntegerField(verbose_name='Год окончания')),
                ('seniority', models.IntegerField(verbose_name='Стаж')),
                ('series_passport', models.IntegerField(verbose_name='Серия паспорта')),
                ('numner_passport', models.IntegerField(verbose_name='Номер паспорта')),
                ('sex', models.CharField(choices=[('Male', 'Мужской'), ('Female', 'Женский')], max_length=10, verbose_name='Пол')),
                ('country', models.CharField(default='Россия', max_length=100, verbose_name='Страна')),
                ('state', models.CharField(help_text='Край, область', max_length=150, verbose_name='Субъект')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('street', models.CharField(blank=True, max_length=200, null=True, verbose_name='Улица')),
                ('house', models.CharField(max_length=20, verbose_name='Дом')),
                ('entrance', models.CharField(blank=True, max_length=10, null=True, verbose_name='Подъезд')),
                ('apartment', models.CharField(blank=True, max_length=10, null=True, verbose_name='Квартира')),
                ('phone_number', models.CharField(max_length=15, verbose_name='Телефон')),
                ('email', models.CharField(max_length=100, verbose_name='Почта')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
